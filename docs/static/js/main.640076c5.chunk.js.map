{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGif.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","category","type","value","onChange","target","getGifs","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","rest","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFecthGifs","image","GiftExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAoBhD,OACE,cAAC,WAAD,UACE,sBAAMC,SAdW,SAAAC,GACnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GACb,MAAM,CAAEP,GAAR,mBAAuBO,OAEzBN,EAAc,MAOd,SACE,uBAAOO,KAAK,OAAOC,MAAQT,EAAaU,SAnBvB,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,e,+BCRdG,EAAO,uCAAG,WAAOL,GAAP,uBAAAM,EAAA,6DAEfC,EAFe,iDAEmCC,UAAUR,GAF7C,+DAGDS,MAAMF,GAHL,cAGfG,EAHe,gBAICA,EAAKC,OAJN,uBAIdC,EAJc,EAIdA,KAEDC,EAAQD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLC,GAAOD,EAAIC,GACXC,MAAOF,EAAIE,MACXV,IAAG,UAAIQ,EAAIG,cAAR,aAAI,EAAYC,iBAAiBZ,QAVnB,kBAadM,GAbc,4CAAH,sD,QCEPO,EAAc,SAAC,GAAiB,EAAhBJ,GAAiB,IAAXK,EAAU,sBAG3C,OACE,sBAAKC,UAAU,yCAAf,UACE,qBAAKC,IAAKF,EAAKd,IAAKiB,IAAI,KACxB,4BACGH,EAAKJ,YCLDQ,EAAU,SAAC,GAAkB,IAAhBzB,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAc,IAAD,EAEfR,mBAAS,CAEjCoB,KAAM,GACNc,SAAS,IAL8B,mBAElCC,EAFkC,KAE3BC,EAF2B,KAiBzC,OATAC,qBAAU,WACRxB,EAASL,GAAW8B,MAAM,SAAAf,GACtBa,EAAS,CACPhB,KAAMG,EACNW,SAAS,SAGf,CAAC1B,IAEI2B,EDZ0BI,CAAa/B,GAAjCkB,EAJ0B,EAI/BN,KAAac,EAJkB,EAIlBA,QAIrB,OACE,eAAC,WAAD,WACE,6BAAM1B,IACF0B,GAAW,gDACb,qBAAKJ,UAAU,YAAf,SACGJ,EAAOJ,KAAI,SAACkB,GACX,OAAO,cAAC,EAAD,eAAgCA,GAAdA,EAAMhB,aEVrCiB,EAAgB,WAAI,MAIYzC,mBAAS,CAAC,cAJtB,mBAIjB0C,EAJiB,KAIL3C,EAJK,KAWxB,OACE,eAAC,WAAD,WACE,+CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAGA,6BAEI2C,EAAWpB,KAAK,SAAAd,GAAQ,OAEtB,aADA,CACC,EAAD,CAASA,SAAWA,GAAiBA,YASjDmC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.640076c5.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\r\nimport propTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleOnChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    // console.log('Submit hecho');\r\n    if( inputValue.trim().length > 2){\r\n      setCategories((category)=> {\r\n        return [inputValue, ...category]\r\n      })\r\n      setInputValue('');\r\n    }\r\n    // console.log(category);\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <form onSubmit={ handleSubmit }>\r\n        <input type=\"text\" value={ inputValue } onChange={ handleOnChange }/>\r\n      </form>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: propTypes.func.isRequired\r\n}","export const getGifs = async (category) => {\r\n\r\n  const url  = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=fPf9OHuxW03oICooJRkkGegk1GxV8f4a`;\r\n  const resp =  await fetch(url);\r\n  const {data} =  await resp.json();\r\n\r\n  const gifs  = data.map(img => {\r\n    return {\r\n      id   : img.id,\r\n      title: img.title,\r\n      url  : img.images?.downsized_medium.url\r\n    }\r\n  })\r\n  return gifs;\r\n  // console.log(gifs);\r\n  // setImages(gifs)\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,...rest}) => {\r\n  \r\n  // console.log({});\r\n  return (\r\n    <div className=\"card animate__animated animate__bounce\">\r\n      <img src={rest.url} alt=\"\"/>\r\n      <p>\r\n        {rest.title}\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Fragment } from 'react'\r\nimport { useFecthGifs } from '../hooks/useFetchGif';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n  // const [images, setImages] = useState([]);\r\n\r\n  const { data:images, loading } = useFecthGifs(category);\r\n\r\n  //IGUAL QUE COMPONENTDIDMOUNT\r\n\r\n  return (\r\n    <Fragment>\r\n      <h3>{ category }</h3>\r\n        { loading && <div>'Cargando...'</div> } \r\n        <div className=\"card-grid\">\r\n          {images.map((image)=>{\r\n            return <GifGridItem key={image.id} {...image}></GifGridItem>; \r\n          })}                \r\n        </div> \r\n    </Fragment>\r\n  )\r\n}\r\n","import { useState,useEffect } from \"react\";\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFecthGifs = ( category) => {\r\n\r\n  const [state, setstate] = useState({\r\n    \r\n    data: [],\r\n    loading: true\r\n  })\r\n\r\n  useEffect(()=>{\r\n    getGifs( category ).then( img => {\r\n        setstate({\r\n          data: img,\r\n          loading: false\r\n        })\r\n    });\r\n  },[category]) // esto para que se vuelva a re renderizar si hay algun cambio\r\n\r\n  return state; \r\n}","import React,{ Fragment, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n//components\nimport {AddCategory} from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nconst GiftExpertApp = ()=>{\n\n  // const categories = ['One Punch','Samurai X','Dragon ball'];\n\n  const [categories, setCategories] = useState(['One Punch']);\n\n  // const handleAdd = ()=> {\n  //   setCategories([...categories,'HunterxHunter']);\n\n  // }\n   \n  return(\n    <Fragment>\n      <h2>GiftExpertApp</h2>\n      <AddCategory setCategories={ setCategories }/>\n      <hr/>\n\n      {/* <button onClick={handleAdd}> Agregar </button> */}\n      <ul>\n        {\n          categories.map( category => \n            // <li key={category}>{category}</li>\n            <GifGrid category={ category } key={ category }/> \n          )\n        }\n      </ul>\n    </Fragment>\n  )\n}\n\n\nReactDOM.render(\n    <GiftExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}